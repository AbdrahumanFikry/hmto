import 'dart:async';import 'dart:typed_data';import 'package:easy_localization/easy_localization.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:geolocator/geolocator.dart';import 'package:provider/provider.dart';import 'package:qrscan/qrscan.dart' as scanner;import 'package:senior/forceField/store.dart';import 'package:senior/providers/fieldForceProvider.dart';class QrReaderFieldForce extends StatefulWidget {  @override  _QrReaderFieldForceState createState() => _QrReaderFieldForceState();}class _QrReaderFieldForceState extends State<QrReaderFieldForce> {  bool hasError = false;  Uint8List bytes = Uint8List(0);  String error = tr('extra.error');  TextEditingController _outputController;  var currentLocation = Position();  bool searching = false;  Future _scan() async {    setState(() {      hasError = false;    });    String barcode = await scanner.scan();    try {      if (barcode == null) {        print('nothing return.');        setState(() {          hasError = true;        });      } else {        this._outputController.text = barcode;        print('BarCode Output : ' + barcode);        await Provider.of<FieldForceData>(context, listen: false).qrReader(          qrData: barcode,        );        final provider = Provider.of<FieldForceData>(context, listen: false);        final qrResult = provider.qrResult;        if (qrResult != null) {          final competitors = provider.competitors;          final products = provider.products;          final longAnswerQuestion = provider.longAnswerQuestion;          final trueAndFalse = provider.trueAndFalse;          final optionQuestion = provider.optionQuestion;          Navigator.of(context).pushReplacement(            MaterialPageRoute(              builder: (context) => FieldForceStore(                id: qrResult.storeInfo.id,                imageIn: qrResult.storeInfo.imageIn,                imageOut: qrResult.storeInfo.imageOut,                imageStoreFront: qrResult.storeInfo.imageStoreFront,                imageStoreAds: qrResult.storeInfo.imageStoreAds,                customerName: qrResult.storeInfo.customerName,                landmark: qrResult.storeInfo.landmark,                mobile: qrResult.storeInfo.mobile,                rate: qrResult.storeInfo.rate,                storeName: qrResult.storeInfo.storeName,                competitors: competitors,                products: products,                longAnswerQuestion: longAnswerQuestion,                trueAndFalse: trueAndFalse,                optionQuestion: optionQuestion,              ),            ),          );          setState(() {            hasError = false;          });        }      }    } catch (e) {      error = e.toString();      setState(() {        hasError = true;      });    }  }  @override  initState() {    super.initState();    this._outputController = new TextEditingController();    _scan();  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Colors.white,      body: Center(        child: hasError            ? Column(                mainAxisAlignment: MainAxisAlignment.center,                crossAxisAlignment: CrossAxisAlignment.center,                children: <Widget>[                  Text(                    error,                    style: TextStyle(                      color: Colors.red,                      fontWeight: FontWeight.bold,                      fontSize: 18.0,                    ),                  ),                  SizedBox(                    height: 30.0,                  ),                  RaisedButton(                    padding: EdgeInsets.symmetric(                      horizontal: 20.0,                      vertical: 10.0,                    ),                    onPressed: _scan,                    color: Colors.green,                    child: Text(                      tr('extra.tryAgain'),                      style: TextStyle(                        color: Colors.white,                        fontWeight: FontWeight.bold,                        fontSize: 18.0,                      ),                    ),                  ),                ],              )            : CircularProgressIndicator(),      ),    );  }}